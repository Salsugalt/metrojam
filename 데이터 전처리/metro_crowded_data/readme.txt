일정

9/19 ~ 9/26 : 기획
9/26 ~ 10/3 : 데이터 수집 및 분석
10/3 ~ 10/10 : 데이터 정제, 변환, 전처리
10/10 ~ 10/17 : 머신러닝 모델 선정, 최적 모델 구현
10/17 ~ 10/24 : 머신러닝 모델 테스트
10/24 ~ 10/31 : db구현
10/31 ~ 11/7 : 앱 구현을 위한 구성
11/7 ~ 11/14 : 앱 테스트
11/21 ~ 11/28 :



일지 0924
작성한 내용 : xml 파싱후 df로 변환
다음으로 해야할것 : 다른 년도 데이터 가져와서 df 로 만들고 각각의 역의 데이터로 분류해서 학습할 수 있는 데이터로 만들기 
## 추가적으로 더 필요한 데이터 긁어오기
주석 : 굳이 api로 긁어올 필요가 있는가? -> 분기에 추가되는 데이터에 대응하기위함(csv 파일로 하면 편하긴함)
서버 - 클라이언트 구조로 만들어서 클라이언트가 데이터를 요청할 때 예측된 데이터셋을 보내주고 처리?
서버는 주기적으로 데이터셋을 업데이트 (신규 공공데이터가 추가될 시)

피클파일 설명 https://velog.io/@nochesita/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%ED%94%BC%ED%81%B4pkl%EB%A1%9C-%EA%B0%9D%EC%B2%B4-%EC%A0%80%EC%9E%A5%ED%95%98%EA%B8%B0

일지 1001
작성내용 : 컬럼이름 변경, 및 순서화, 다른 해의 데이터 가져오기
다음으로 할거: 다음 해에 추가되는 데이터에 대응하기 위해 selenuum을 활용하여 추가 데이터의 uddi 구해오기,
              데이터 통합 및 학습에 필요한 추가적인 데이터 구하기, 어떻게 학습할 건지 정하기

             
데이터 전처리:
서로 다른 API나 데이터 소스에서 가져온 정보를 통합하기 위해 데이터 형식을 맞추는 것이 중요합니다.
결측치 처리나 이상치 탐지 및 제거 작업도 필요할 수 있습니다.
특성 공학:
승하차 인원뿐만 아니라 날씨, 휴일 여부, 이벤트 정보(예: 콘서트, 스포츠 경기 등) 등을 추가 특성으로 활용하면 예측 성능을 높일 수 있습니다.
모델 선택:
시간대별 패턴을 반영하기 위해 시계열 예측 모델(예: ARIMA, LSTM)이나 머신러닝 모델(Random Forest, XGBoost)을 사용할 수 있습니다.
실시간 도착 정보는 추가적인 피처로 고려할 수 있습니다.